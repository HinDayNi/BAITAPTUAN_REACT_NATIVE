import React, { useState, useEffect } from "react";
import {
  Text,
  View,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Alert,
  ScrollView,
  Linking,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { StatusBar } from "expo-status-bar";
import { router } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as DB from "../database/db";

const API_URL_KEY = "@api_url";

export default function Settings() {
  const [apiUrl, setApiUrl] = useState("");
  const [isSyncing, setIsSyncing] = useState(false);

  useEffect(() => {
    loadApiUrl();
  }, []);

  const loadApiUrl = async () => {
    try {
      const savedUrl = await AsyncStorage.getItem(API_URL_KEY);
      if (savedUrl) {
        setApiUrl(savedUrl);
      }
    } catch (error) {
      console.error("Error loading API URL:", error);
    }
  };

  const saveApiUrl = async () => {
    try {
      if (!apiUrl.trim()) {
        Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p URL API");
        return;
      }

      // Ki·ªÉm tra URL h·ª£p l·ªá
      if (!apiUrl.startsWith("http://") && !apiUrl.startsWith("https://")) {
        Alert.alert("L·ªói", "URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://");
        return;
      }

      // Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn API
      try {
        const response = await fetch(apiUrl);
        // Ch·∫•p nh·∫≠n c·∫£ 200 v√† 404 (404 c√≥ nghƒ©a l√† endpoint t·ªìn t·∫°i nh∆∞ng ch∆∞a c√≥ data)
        if (!response.ok && response.status !== 404) {
          Alert.alert(
            "C·∫£nh b√°o",
            `Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API (status: ${response.status}). B·∫°n v·∫´n mu·ªën l∆∞u URL n√†y?`,
            [
              { text: "H·ªßy", style: "cancel" },
              {
                text: "L∆∞u",
                onPress: async () => {
                  await AsyncStorage.setItem(API_URL_KEY, apiUrl.trim());
                  Alert.alert("Th√†nh c√¥ng", "ƒê√£ l∆∞u URL API");
                },
              },
            ]
          );
          return;
        }
      } catch {
        Alert.alert(
          "C·∫£nh b√°o",
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. Vui l√≤ng ki·ªÉm tra l·∫°i URL v√† k·∫øt n·ªëi m·∫°ng.",
          [
            { text: "H·ªßy", style: "cancel" },
            {
              text: "L∆∞u",
              onPress: async () => {
                await AsyncStorage.setItem(API_URL_KEY, apiUrl.trim());
                Alert.alert("Th√†nh c√¥ng", "ƒê√£ l∆∞u URL API");
              },
            },
          ]
        );
        return;
      }

      await AsyncStorage.setItem(API_URL_KEY, apiUrl.trim());
      Alert.alert(
        "Th√†nh c√¥ng",
        "ƒê√£ l∆∞u URL API v√† x√°c nh·∫≠n k·∫øt n·ªëi th√†nh c√¥ng"
      );
    } catch (error) {
      console.error("Error saving API URL:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l∆∞u URL API");
    }
  };

  const handleSync = async () => {
    try {
      const savedUrl = await AsyncStorage.getItem(API_URL_KEY);
      const urlToUse = savedUrl || apiUrl;

      if (!urlToUse.trim()) {
        Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p v√† l∆∞u URL API tr∆∞·ªõc khi ƒë·ªìng b·ªô");
        return;
      }

      Alert.alert(
        "X√°c nh·∫≠n ƒë·ªìng b·ªô",
        "Thao t√°c n√†y s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu tr√™n API v√† upload l·∫°i t·ª´ thi·∫øt b·ªã. B·∫°n c√≥ ch·∫Øc ch·∫Øn?",
        [
          { text: "H·ªßy", style: "cancel" },
          {
            text: "ƒê·ªìng b·ªô",
            style: "destructive",
            onPress: async () => {
              setIsSyncing(true);
              try {
                const count = await DB.syncToApi(urlToUse);
                Alert.alert(
                  "Th√†nh c√¥ng",
                  `ƒê√£ ƒë·ªìng b·ªô ${count} giao d·ªãch l√™n API`
                );
              } catch (error: any) {
                console.error("Sync error:", error);
                Alert.alert(
                  "L·ªói ƒë·ªìng b·ªô",
                  error.message ||
                    "Kh√¥ng th·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra URL API."
                );
              } finally {
                setIsSyncing(false);
              }
            },
          },
        ]
      );
    } catch (error) {
      console.error("Error in handleSync:", error);
      Alert.alert("L·ªói", "C√≥ l·ªói x·∫£y ra khi ƒë·ªìng b·ªô");
      setIsSyncing(false);
    }
  };

  const openMockApiGuide = () => {
    Linking.openURL("https://mockapi.io/");
  };

  const showApiStructure = () => {
    Alert.alert(
      "C·∫•u tr√∫c API",
      `Endpoint MockAPI c·∫ßn c√≥ c·∫•u tr√∫c:

üìã Resource name: transactions (ho·∫∑c t∆∞∆°ng t·ª±)

üîß Schema:
‚Ä¢ title: string
‚Ä¢ amount: number
‚Ä¢ category: string
‚Ä¢ createdAt: string
‚Ä¢ type: string

üìù V√≠ d·ª• URL:
https://[your-id].mockapi.io/transactions

‚ö†Ô∏è L∆∞u √Ω:
- Kh√¥ng c·∫ßn tr∆∞·ªùng id, isDeleted, deletedAt
- Ch·ªâ ƒë·ªìng b·ªô giao d·ªãch ch∆∞a x√≥a`,
      [{ text: "OK" }]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="light" />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text style={styles.backButtonText}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>C√†i ƒë·∫∑t ƒë·ªìng b·ªô</Text>
        <View style={styles.placeholder} />
      </View>

      <ScrollView style={styles.content}>
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üîó C·∫•u h√¨nh API</Text>

          <Text style={styles.label}>URL API MockAPI:</Text>
          <TextInput
            style={styles.input}
            value={apiUrl}
            onChangeText={setApiUrl}
            placeholder="https://your-id.mockapi.io/transactions"
            placeholderTextColor="#94a3b8"
            autoCapitalize="none"
            autoCorrect={false}
          />

          <TouchableOpacity style={styles.saveButton} onPress={saveApiUrl}>
            <Text style={styles.saveButtonText}>üíæ L∆∞u URL</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.helpButton}
            onPress={showApiStructure}
          >
            <Text style={styles.helpButtonText}>üìã Xem c·∫•u tr√∫c API</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.linkButton}
            onPress={openMockApiGuide}
          >
            <Text style={styles.linkButtonText}>
              üåê M·ªü MockAPI.io (t·∫°o API m·ªõi)
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üîÑ ƒê·ªìng b·ªô d·ªØ li·ªáu</Text>

          <View style={styles.infoBox}>
            <Text style={styles.infoText}>
              ‚Ä¢ X√≥a to√†n b·ªô d·ªØ li·ªáu tr√™n API{"\n"}‚Ä¢ Upload t·∫•t c·∫£ giao d·ªãch t·ª´
              thi·∫øt b·ªã{"\n"}‚Ä¢ Ch·ªâ ƒë·ªìng b·ªô giao d·ªãch ch∆∞a x√≥a
            </Text>
          </View>

          <TouchableOpacity
            style={[styles.syncButton, isSyncing && styles.syncButtonDisabled]}
            onPress={handleSync}
            disabled={isSyncing}
          >
            <Text style={styles.syncButtonText}>
              {isSyncing ? "‚è≥ ƒêang ƒë·ªìng b·ªô..." : "üîÑ ƒê·ªìng b·ªô l√™n API"}
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‚ÑπÔ∏è H∆∞·ªõng d·∫´n</Text>

          <View style={styles.guideBox}>
            <Text style={styles.guideText}>
              <Text style={styles.guideStep}>B∆∞·ªõc 1:</Text> Truy c·∫≠p MockAPI.io
              v√† t·∫°o project m·ªõi{"\n\n"}
              <Text style={styles.guideStep}>B∆∞·ªõc 2:</Text> T·∫°o resource
              transactions v·ªõi schema theo c·∫•u tr√∫c{"\n\n"}
              <Text style={styles.guideStep}>B∆∞·ªõc 3:</Text> Copy URL endpoint v√†
              paste v√†o √¥ tr√™n{"\n\n"}
              <Text style={styles.guideStep}>B∆∞·ªõc 4:</Text> Nh·∫•n L∆∞u URL sau ƒë√≥
              nh·∫•n ƒê·ªìng b·ªô l√™n API
            </Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0f172a",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 16,
    backgroundColor: "#1e293b",
    borderBottomWidth: 1,
    borderBottomColor: "#334155",
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    color: "#60a5fa",
    fontSize: 16,
    fontWeight: "600",
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#fff",
  },
  placeholder: {
    width: 80,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  section: {
    marginBottom: 24,
    backgroundColor: "#1e293b",
    borderRadius: 12,
    padding: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    color: "#94a3b8",
    marginBottom: 8,
  },
  input: {
    backgroundColor: "#0f172a",
    borderRadius: 8,
    padding: 12,
    color: "#fff",
    fontSize: 14,
    borderWidth: 1,
    borderColor: "#334155",
    marginBottom: 12,
  },
  saveButton: {
    backgroundColor: "#3b82f6",
    borderRadius: 8,
    padding: 14,
    alignItems: "center",
    marginBottom: 8,
  },
  saveButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
  helpButton: {
    backgroundColor: "#475569",
    borderRadius: 8,
    padding: 12,
    alignItems: "center",
    marginBottom: 8,
  },
  helpButtonText: {
    color: "#fff",
    fontSize: 14,
  },
  linkButton: {
    backgroundColor: "#334155",
    borderRadius: 8,
    padding: 12,
    alignItems: "center",
  },
  linkButtonText: {
    color: "#60a5fa",
    fontSize: 14,
  },
  infoBox: {
    backgroundColor: "#0f172a",
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    borderLeftWidth: 4,
    borderLeftColor: "#3b82f6",
  },
  infoText: {
    color: "#cbd5e1",
    fontSize: 14,
    lineHeight: 22,
  },
  syncButton: {
    backgroundColor: "#10b981",
    borderRadius: 8,
    padding: 16,
    alignItems: "center",
  },
  syncButtonDisabled: {
    backgroundColor: "#475569",
  },
  syncButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  guideBox: {
    backgroundColor: "#0f172a",
    borderRadius: 8,
    padding: 16,
  },
  guideText: {
    color: "#cbd5e1",
    fontSize: 14,
    lineHeight: 24,
  },
  guideStep: {
    color: "#60a5fa",
    fontWeight: "bold",
  },
});
